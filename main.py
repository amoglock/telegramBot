import json

from pyrogram import Client, filters

import constants

app = Client("my_bot")


@app.on_message(filters.command("location"))
async def send_location(client, message):
    user = message.chat.id
    username = message.chat.first_name
    await app.send_venue(user, latitude=constants.LATITUDE, longitude=constants.LONGITUDE,
                         title=f"{username} You can find us here", address=constants.ADDRESS)


@app.on_message(filters.command("about"))
async def send_location(client, message):
    await app.send_message(message.chat.id, constants.description_about)
    await app.send_photo(message.chat.id, "photo/photo_2022-10-23_14-34-56.jpg",
                         caption=" –î–æ –≤—Å—Ç—Ä–µ—á–∏ –∑–∞ –Ω–∞—à–∏–º —Å–µ–º–µ–π–Ω—ã–º —Å—Ç–æ–ª–æ–º!ü§ó")


@app.on_message(filters.command("menu") | (filters.regex(r"[–ú-–º]–µ–Ω—é") & filters.regex(r"[–°-—Å]–µ–≥–æ–¥–Ω—è")))
async def menu_today(client, message):
    await app.send_message(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –≥–æ—Ç–æ–≤–∏–º:\n"
                                            "- –ö–∞—Ä–∏—Ñ—É—Ä–∞–≤–∞ (–∫—Ä–µ–º —Å—É–ø –∏–∑ —Ü–≤–µ—Ç–Ω–æ–π –∫–∞–ø—É—Å—Ç—ã, —Å —Ö—Ä—É—Å—Ç—è—â–µ–π –∫—É—Ä–æ–π) üçú\n"
                                            "- –°–∞–ª–∞—Ç —Å —Ç—ã–∫–≤–æ–π, –∫—É—Å-–∫—É—Å–æ–º –∏ –±—Ä—ã–Ω–∑–æ–π ü•ó\n"
                                            "- –ì–ª–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–≤–∏–Ω–æ–π –±–æ–∫ —Å –±—É–ª–≥—É—Ä–æ–º ü•©\n")


@app.on_message(filters.command("add"))
async def add_to_menu(client, message):
    await app.send_message(message.chat.id, "–¢—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –Ω–æ–≤–æ–µ –±–ª—é–¥–æ –≤ –±–∞–∑—É.\n–ß—Ç–æ–±—ã –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤–≤–µ–¥–∏ "
                                            "—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                            "[1, 2, 3 –∏–ª–∏ 4][–ø—Ä–æ–±–µ–ª][–Ω–∞–∑–≤–∞–Ω–∏–µ] –±–µ–∑ —Å–∫–æ–±–æ–∫.\n–ì–¥–µ 1 —ç—Ç–æ –∑–∞–≤—Ç—Ä–∞–∫, "
                                            "2 –æ–±–µ–¥, 3 —Å–∞–ª–∞—Ç, 4 –Ω–∞–ø–∏—Ç–æ–∫")

    @app.on_message(filters.text)
    async def answer(client_1, new_message):
        try:
            match new_message.text.split(maxsplit=1):
                case ["1", *obj]:
                    await add_new("breakfast", *obj)
                case ["2", *obj]:
                    await add_new("lunch", *obj)
                case ["3", *obj]:
                    await add_new("drinks", *obj)
                case _:
                    await app.send_message(message.chat.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ß–∏—Å–ª–æ –∏ –±–ª—é–¥–æ.\n–ù–∞–ø—Ä–∏–º–µ—Ä\n**4 —á–∞–π**")
                    return
            await app.send_message(message.chat.id, "Success")
        except TypeError:
            await app.send_message(message.chat.id, "–¢—ã –∑–∞–±—ã–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.")


async def add_new(category, dish):
    with open('menu.json', 'r', encoding='utf8') as file:
        data = json.load(file)
        data[0][category].append(dish.capitalize())
        with open('menu.json', 'w') as outfile:
            json.dump(data, outfile, indent=4)


@app.on_message(filters.audio & filters.private)
async def audio(client, message):
    print(message.audio.file_id)


@app.on_message(filters.command("audio"))
async def send_audio(client, message):
    await app.send_audio(message.chat.id, "CQACAgIAAxkBAAIC_WNW4_zF1BgdpaUBUBbwKp_0KmowAAKNJAACPQABuUrQfivkbKM0iB4E")


app.run()
